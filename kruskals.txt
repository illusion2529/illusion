import java.util.*;

class Edge {
    int src, dest, weight;

    Edge(int src, int dest, int weight) {
        this.src = src;
        this.dest = dest;
        this.weight = weight;
    }
}

class Subset {
    int parent;
    int rank;
}

class Graph {
    int V, E;
    ArrayList<Edge> edges;

    Graph(int V, int E) {
        this.V = V;
        this.E = E;
        edges = new ArrayList<>();
    }
}

public class kruskals {
    static boolean compareEdges(Edge edge1, Edge edge2) {
        return edge1.weight < edge2.weight;
    }

    static int find(Subset[] subsets, int i) {
        if (subsets[i].parent != i)
            subsets[i].parent = find(subsets, subsets[i].parent);
        return subsets[i].parent;
    }

    static void union(Subset[] subsets, int x, int y) {
        int xroot = find(subsets, x);
        int yroot = find(subsets, y);

        if (subsets[xroot].rank < subsets[yroot].rank)
            subsets[xroot].parent = yroot;
        else if (subsets[xroot].rank > subsets[yroot].rank)
            subsets[yroot].parent = xroot;
        else {
            subsets[yroot].parent = xroot;
            subsets[xroot].rank++;
        }
    }

    static void kruskalMST(Graph graph) {
        int V = graph.V;
        ArrayList<Edge> result = new ArrayList<>();
        int e = 0;
        int i = 0;

        Collections.sort(graph.edges, (edge1, edge2) -> edge1.weight - edge2.weight);

        Subset[] subsets = new Subset[V];
        for (int v = 0; v < V; ++v) {
            subsets[v] = new Subset();
            subsets[v].parent = v;
            subsets[v].rank = 0;
        }

        while (e < V - 1 && i < graph.E) {
            Edge nextEdge = graph.edges.get(i++);

            int x = find(subsets, nextEdge.src);
            int y = find(subsets, nextEdge.dest);

            if (x != y) {
                result.add(nextEdge);
                union(subsets, x, y);
                e++;
            }
        }

        System.out.println("Minimum Spanning Tree (MST):");
        for (Edge edge : result) {
            System.out.println(edge.src + " -- " + edge.dest + " : " + edge.weight);
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Graph graph = new Graph(0, 0);

        System.out.print("Enter the number of vertices and edges: ");
        graph.V = scanner.nextInt();
        graph.E = scanner.nextInt();

        graph.edges = new ArrayList<>(graph.E);

        System.out.println("Enter the edges (source, destination, weight):");
        for (int i = 0; i < graph.E; ++i) {
            int src = scanner.nextInt();
            int dest = scanner.nextInt();
            int weight = scanner.nextInt();
            graph.edges.add(new Edge(src, dest, weight));
        }

        kruskalMST(graph);
    }
}
