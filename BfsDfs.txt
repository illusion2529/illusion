from collections import deque

class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.adjList = [[] for _ in range(vertices)]

    def addEdge(self, src, dest):
        self.adjList[src].append(dest)
        self.adjList[dest].append(src)

    def dfs(self, start):
        visited = [False] * self.vertices
        self._dfsRecursive(start, visited)

    def _dfsRecursive(self, v, visited):
        visited[v] = True
        print(v, end=' ')

        for neighbor in self.adjList[v]:
            if not visited[neighbor]:
                self._dfsRecursive(neighbor, visited)

    def bfs(self, start):
        visited = [False] * self.vertices
        queue = deque()
        queue.append(start)
        visited[start] = True
        self._bfsRecursive(visited, queue)

    def _bfsRecursive(self, visited, queue):
        if not queue:
            return
        
        v = queue.popleft()
        print(v, end=' ')

        for neighbor in self.adjList[v]:
            if not visited[neighbor]:
                queue.append(neighbor)
                visited[neighbor] = True

        self._bfsRecursive(visited, queue)


# Get user input for the number of vertices
vertices = int(input("Enter the number of vertices: "))
g = Graph(vertices)

# Get user input for the edges
edges = int(input("Enter the number of edges: "))
print("Enter the edges (src dest):")
for _ in range(edges):
    src, dest = map(int, input().split())
    g.addEdge(src, dest)

# Get user input for the starting vertex
start_vertex = int(input("Enter the starting vertex: "))

# Perform DFS and BFS traversals
print("DFS Traversal:")
g.dfs(start_vertex)
print("\nBFS Traversal:")
g.bfs(start_vertex)


/* sample input-
Enter the number of vertices: 5
Enter the number of edges: 6
Enter the edges (src dest):
0 1
0 2
1 3
2 4
1 2
3 4
Enter the starting vertex: 0
DFS Traversal:
0 1 3 4 2 
BFS Traversal:
0 1 2 3 4 */